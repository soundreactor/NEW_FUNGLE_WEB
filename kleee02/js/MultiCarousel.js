/* src/MultiCarousel.html generated by Svelte v2.16.1 */
var MultiCarousel = (function() { "use strict";

	function data() {
  return {
    delay: 1500,
    transition: 600,
    items: [],
    count: 5,
    controls: [
      'previous',
      'next',
      'pause',
      'start'
    ]
  }
};

	var methods = {
  next () {
    const {_transitioning, _transition, _width, transition, _timer} = this.get();

    if (_transitioning) {
      return;
    }

    this.set({_transitioning: true});
    const children = this.refs.items.children;
    let foundActive = false;
    let previous;
    // Find the first one marked active, then the first one not active.
    for (let i = 0; i < children.length; i++) {
      if (!foundActive && children[i].classList.contains("active")) {
        previous = children[i];
        foundActive = true;
        continue;
      }
      if (foundActive && !children[i].classList.contains("active")) {
        children[i].classList.add("active");
        break;
      }
    }
    this.refs.items.style.transition = _transition;
    this.refs.items.style.left = "-"+_width;

    // Wait the transition time, then move the previous element to the end.
    setTimeout((function() {
      previous.classList.remove("active");
      this.refs.items.style.transition = "";
      this.refs.items.style.left = "0";
      this.refs.items.appendChild(previous);
      this.set({_transitioning: false});
    }).bind(this), transition);

    // Restart the timer.
    if (_timer) {
      this.start();
    }
  },

  previous () {
    const {_transitioning, _transition, _width, transition, _timer} = this.get();

    if (_transitioning) {
      return;
    }

    this.set({_transitioning: true});
    const children = this.refs.items.children;
    let previous = children[children.length - 1];
    previous.classList.add("active");
    this.refs.items.insertBefore(previous, children[0]);
    requestAnimationFrame((function(){
      this.refs.items.style.transition = "";
      this.refs.items.style.left = "-"+_width;
      setTimeout((function(){
        this.refs.items.style.transition = _transition;
        this.refs.items.style.left = "0";
      }).bind(this), 0);
    }).bind(this));

    // Wait the transition time.
    setTimeout((function() {
      // Find the last one marked active.
      for (let i = children.length - 1; i >= 0; i--) {
        if (children[i].classList.contains("active")) {
          children[i].classList.remove("active");
          break;
        }
      }
      this.refs.items.style.transition = "";
      this.set({_transitioning: false});
    }).bind(this), transition);

    // Restart the timer.
    if (_timer) {
      this.start();
    }
  },

  pause () {
    clearInterval(this.get()._timer);
    this.set({_timer: null});
  },

  start () {
    const {delay, _timer} = this.get();
    if (delay > 0) {
      if (_timer) this.pause();
      this.set({_timer: setInterval(this.next.bind(this), delay)});
    }
  }
};

	function oncreate() {
  this.set({
    _transitioning: false,
    _timer: null
  });

  const {items, count, transition} = this.get();
  this.set({_width: (100 / count)+"%"});
  for (let i = 0; i < items.length; i++) {
    this.refs.items.appendChild(items[i]);
    items[i].style.width = this.get()._width;
  }
  for (let i = 0; i < count; i++) {
    items[i].classList.add("active");
  }
  this.set({_transition: "left "+(transition / 1000)+"s"});
  this.refs.items.style.left = "0";
  this.refs.items.style.transition = this.get()._transition;
  if (items.length <= count) {
    // Don't animate.
    this.set({_transitioning: true});
  } else {
    this.start();
  }
};

	function add_css() {
		var style = createElement("style");
		style.id = 'svelte-v96mw1-style';
		style.textContent = ".multicarousel.svelte-v96mw1{position:relative;overflow:hidden;white-space:nowrap}.previous.svelte-v96mw1,.next.svelte-v96mw1,.pause.svelte-v96mw1,.start.svelte-v96mw1{position:absolute;cursor:pointer;display:flex;z-index:1;fill:#fff}.previous.svelte-v96mw1,.next.svelte-v96mw1{width:30px;align-items:center;height:100%}.previous.svelte-v96mw1{left:0;justify-content:flex-end}.next.svelte-v96mw1{right:0;justify-content:flex-start}.pause.svelte-v96mw1,.start.svelte-v96mw1{width:28px;left:50%;margin-left:-14px;height:30px;bottom:0;justify-content:center;align-items:flex-start}.items.svelte-v96mw1{white-space:nowrap;position:relative}.items.svelte-v96mw1>*{display:none}.items.svelte-v96mw1>*.active{display:inline-block}";
		append(document.head, style);
	}

	function create_main_fragment(component, ctx) {
		var div1, text0, text1, text2, text3, div0;

		var if_block0 = (ctx.controls.indexOf('previous') !== -1) && create_if_block_3(component, ctx);

		var if_block1 = (ctx.controls.indexOf('next') !== -1) && create_if_block_2(component, ctx);

		var if_block2 = (ctx._timer && ctx.controls.indexOf('pause') !== -1) && create_if_block_1(component, ctx);

		var if_block3 = (!ctx._timer && ctx.controls.indexOf('start') !== -1) && create_if_block(component, ctx);

		return {
			c() {
				div1 = createElement("div");
				if (if_block0) if_block0.c();
				text0 = createText("\n  ");
				if (if_block1) if_block1.c();
				text1 = createText("\n  ");
				if (if_block2) if_block2.c();
				text2 = createText("\n  ");
				if (if_block3) if_block3.c();
				text3 = createText("\n  ");
				div0 = createElement("div");
				div0.className = "items svelte-v96mw1";
				div1.className = "multicarousel svelte-v96mw1";
			},

			m(target, anchor) {
				insert(target, div1, anchor);
				if (if_block0) if_block0.m(div1, null);
				append(div1, text0);
				if (if_block1) if_block1.m(div1, null);
				append(div1, text1);
				if (if_block2) if_block2.m(div1, null);
				append(div1, text2);
				if (if_block3) if_block3.m(div1, null);
				append(div1, text3);
				append(div1, div0);
				component.refs.items = div0;
			},

			p(changed, ctx) {
				if (ctx.controls.indexOf('previous') !== -1) {
					if (!if_block0) {
						if_block0 = create_if_block_3(component, ctx);
						if_block0.c();
						if_block0.m(div1, text0);
					}
				} else if (if_block0) {
					if_block0.d(1);
					if_block0 = null;
				}

				if (ctx.controls.indexOf('next') !== -1) {
					if (!if_block1) {
						if_block1 = create_if_block_2(component, ctx);
						if_block1.c();
						if_block1.m(div1, text1);
					}
				} else if (if_block1) {
					if_block1.d(1);
					if_block1 = null;
				}

				if (ctx._timer && ctx.controls.indexOf('pause') !== -1) {
					if (!if_block2) {
						if_block2 = create_if_block_1(component, ctx);
						if_block2.c();
						if_block2.m(div1, text2);
					}
				} else if (if_block2) {
					if_block2.d(1);
					if_block2 = null;
				}

				if (!ctx._timer && ctx.controls.indexOf('start') !== -1) {
					if (!if_block3) {
						if_block3 = create_if_block(component, ctx);
						if_block3.c();
						if_block3.m(div1, text3);
					}
				} else if (if_block3) {
					if_block3.d(1);
					if_block3 = null;
				}
			},

			d(detach) {
				if (detach) {
					detachNode(div1);
				}

				if (if_block0) if_block0.d();
				if (if_block1) if_block1.d();
				if (if_block2) if_block2.d();
				if (if_block3) if_block3.d();
				if (component.refs.items === div0) component.refs.items = null;
			}
		};
	}

	// (3:2) {#if controls.indexOf('previous') !== -1}
	function create_if_block_3(component, ctx) {
		var div;

		function click_handler(event) {
			component.previous();
		}

		return {
			c() {
				div = createElement("div");
				div.innerHTML = `<svg width="28" height="28" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><defs><filter id="shadow" x="0" y="0" width="200%" height="200%"><feOffset result="offOut" in="SourceAlpha" dx="0" dy="0"></feOffset><feGaussianBlur result="blurOut" in="offOut" stdDeviation="10"></feGaussianBlur><feBlend in="SourceGraphic" in2="blurOut" mode="normal"></feBlend></filter></defs><path filter="url(#shadow)" d="M1427 301l-531 531 531 531q19 19 19 45t-19 45l-166 166q-19 19-45 19t-45-19l-742-742q-19-19-19-45t19-45l742-742q19-19 45-19t45 19l166 166q19 19 19 45t-19 45z"></path></svg>`;
				addListener(div, "click", click_handler);
				div.className = "previous svelte-v96mw1";
			},

			m(target, anchor) {
				insert(target, div, anchor);
			},

			d(detach) {
				if (detach) {
					detachNode(div);
				}

				removeListener(div, "click", click_handler);
			}
		};
	}

	// (17:2) {#if controls.indexOf('next') !== -1}
	function create_if_block_2(component, ctx) {
		var div;

		function click_handler(event) {
			component.next();
		}

		return {
			c() {
				div = createElement("div");
				div.innerHTML = `<svg width="28" height="28" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><defs><filter id="shadow" x="0" y="0" width="200%" height="200%"><feOffset result="offOut" in="SourceAlpha" dx="0" dy="0"></feOffset><feGaussianBlur result="blurOut" in="offOut" stdDeviation="10"></feGaussianBlur><feBlend in="SourceGraphic" in2="blurOut" mode="normal"></feBlend></filter></defs><path filter="url(#shadow)" d="M1363 877l-742 742q-19 19-45 19t-45-19l-166-166q-19-19-19-45t19-45l531-531-531-531q-19-19-19-45t19-45l166-166q19-19 45-19t45 19l742 742q19 19 19 45t-19 45z"></path></svg>`;
				addListener(div, "click", click_handler);
				div.className = "next svelte-v96mw1";
			},

			m(target, anchor) {
				insert(target, div, anchor);
			},

			d(detach) {
				if (detach) {
					detachNode(div);
				}

				removeListener(div, "click", click_handler);
			}
		};
	}

	// (31:2) {#if _timer && controls.indexOf('pause') !== -1}
	function create_if_block_1(component, ctx) {
		var div;

		function click_handler(event) {
			component.pause();
		}

		return {
			c() {
				div = createElement("div");
				div.innerHTML = `<svg width="28" height="28" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><defs><filter id="shadow" x="0" y="0" width="200%" height="200%"><feOffset result="offOut" in="SourceAlpha" dx="0" dy="0"></feOffset><feGaussianBlur result="blurOut" in="offOut" stdDeviation="10"></feGaussianBlur><feBlend in="SourceGraphic" in2="blurOut" mode="normal"></feBlend></filter></defs><path filter="url(#shadow)" transform="translate(179.2 179.2) scale(0.8)" d="M1664 192v1408q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45v-1408q0-26 19-45t45-19h512q26 0 45 19t19 45zm-896 0v1408q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45v-1408q0-26 19-45t45-19h512q26 0 45 19t19 45z"></path></svg>`;
				addListener(div, "click", click_handler);
				div.className = "pause svelte-v96mw1";
			},

			m(target, anchor) {
				insert(target, div, anchor);
			},

			d(detach) {
				if (detach) {
					detachNode(div);
				}

				removeListener(div, "click", click_handler);
			}
		};
	}

	// (45:2) {#if !_timer && controls.indexOf('start') !== -1}
	function create_if_block(component, ctx) {
		var div;

		function click_handler(event) {
			component.start();
		}

		return {
			c() {
				div = createElement("div");
				div.innerHTML = `<svg width="28" height="28" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><defs><filter id="shadow" x="0" y="0" width="200%" height="200%"><feOffset result="offOut" in="SourceAlpha" dx="0" dy="0"></feOffset><feGaussianBlur result="blurOut" in="offOut" stdDeviation="10"></feGaussianBlur><feBlend in="SourceGraphic" in2="blurOut" mode="normal"></feBlend></filter></defs><path filter="url(#shadow)" transform="translate(179.2 179.2) scale(0.8)" d="M1576 927l-1328 738q-23 13-39.5 3t-16.5-36v-1472q0-26 16.5-36t39.5 3l1328 738q23 13 23 31t-23 31z"></path></svg>`;
				addListener(div, "click", click_handler);
				div.className = "start svelte-v96mw1";
			},

			m(target, anchor) {
				insert(target, div, anchor);
			},

			d(detach) {
				if (detach) {
					detachNode(div);
				}

				removeListener(div, "click", click_handler);
			}
		};
	}

	function MultiCarousel(options) {
		init(this, options);
		this.refs = {};
		this._state = assign(data(), options.data);
		this._intro = true;

		if (!document.getElementById("svelte-v96mw1-style")) add_css();

		this._fragment = create_main_fragment(this, this._state);

		this.root._oncreate.push(() => {
			oncreate.call(this);
			this.fire("update", { changed: assignTrue({}, this._state), current: this._state });
		});

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);

			flush(this);
		}
	}

	assign(MultiCarousel.prototype, {
	 	destroy: destroy,
	 	get: get,
	 	fire: fire,
	 	on: on,
	 	set: set,
	 	_set: _set,
	 	_stage: _stage,
	 	_mount: _mount,
	 	_differs: _differs
	 });
	assign(MultiCarousel.prototype, methods);

	MultiCarousel.prototype._recompute = noop;

	function createElement(name) {
		return document.createElement(name);
	}

	function append(target, node) {
		target.appendChild(node);
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function insert(target, node, anchor) {
		target.insertBefore(node, anchor);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function addListener(node, event, handler, options) {
		node.addEventListener(event, handler, options);
	}

	function removeListener(node, event, handler, options) {
		node.removeEventListener(event, handler, options);
	}

	function init(component, options) {
		component._handlers = blankObject();
		component._slots = blankObject();
		component._bind = options._bind;
		component._staged = {};

		component.options = options;
		component.root = options.root || component;
		component.store = options.store || component.root.store;

		if (!options.root) {
			component._beforecreate = [];
			component._oncreate = [];
			component._aftercreate = [];
		}
	}

	function assign(tar, src) {
		for (var k in src) tar[k] = src[k];
		return tar;
	}

	function assignTrue(tar, src) {
		for (var k in src) tar[k] = 1;
		return tar;
	}

	function flush(component) {
		component._lock = true;
		callAll(component._beforecreate);
		callAll(component._oncreate);
		callAll(component._aftercreate);
		component._lock = false;
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = noop;

		this._fragment.d(detach !== false);
		this._fragment = null;
		this._state = {};
	}

	function get() {
		return this._state;
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			var handler = handlers[i];

			if (!handler.__calling) {
				try {
					handler.__calling = true;
					handler.call(this, data);
				} finally {
					handler.__calling = false;
				}
			}
		}
	}

	function on(eventName, handler) {
		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		flush(this.root);
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		newState = assign(this._staged, newState);
		this._staged = {};

		for (var key in newState) {
			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign(assign({}, oldState), newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			this.fire("state", { changed: changed, current: this._state, previous: oldState });
			this._fragment.p(changed, this._state);
			this.fire("update", { changed: changed, current: this._state, previous: oldState });
		}
	}

	function _stage(newState) {
		assign(this._staged, newState);
	}

	function _mount(target, anchor) {
		this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
	}

	function _differs(a, b) {
		return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function noop() {}

	function blankObject() {
		return Object.create(null);
	}

	function callAll(fns) {
		while (fns && fns.length) fns.shift()();
	}
	return MultiCarousel;
}());